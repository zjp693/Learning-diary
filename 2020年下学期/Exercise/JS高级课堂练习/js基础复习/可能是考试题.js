// 第一题
// 给你一个整数 n，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。
// 示例 1：
// 输入： n = 234
// 输出： 15
// 解释：
// 各位数之积 = 2 * 3 * 4 = 24
// 各位数之和 = 2 + 3 + 4 = 9
// 结果 = 24 - 9 = 15
// 示例 2：
// 输入： n = 4421
// 输出： 21
// 解释：
// 各位数之积 = 4 * 4 * 2 * 1 = 32
// 各位数之和 = 4 + 4 + 2 + 1 = 11
// 结果 = 32 - 11 = 21





// 第二题
// 给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方
// 式存储的，并且它们的每个节点只能存储 一位 数字。
// 如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
// 您可以假设除了数字 0 之外，这两个数都不会以 0 开头。
// 示例：
// 输入： (2 -> 4 -> 3) + (5 -> 6 -> 4)
// 输出： 7 -> 0 -> 8
// 原因： 342 + 465 = 807给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。







// 第三题
// 输入: 123
// 输出: 321
// 示例 2:
// 输入: -123
// 输出: -321
// 示例 3:
// 输入: 120
// 输出: 21





// 第四题
// 输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、 2、
// 3 一直到最大的 3 位数 999。
// 示例 1:
// 输入: n = 1
// 输出: [1, 2, 3, 4, 5, 6, 7, 8, 9]







// 第五题
// 请实现一个函数，把字符串 s 中的每个空格替换成"%20"。
// 示例 1：
// 输入： s = "We are happy."输出： "We%20are%20happy."





// 第六题
// 编写一个方法，找出两个数字 a 和 b 中最大的那一个。不得使用 if-else 或其他比较运算符。
// 示例：
// 输入： a = 1, b = 2
// 输出： 2



// 第七题
// 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样
// 的整数。
// 示例 1:
// 输入: 121
// 输出: true
// 示例 2:
// 输入: -121
// 输出: false
// 解释: 从左向右读, 为 - 121 。 从右向左读, 为 121 - 。因此它不是一个回文数。
// 示例 3:
// 输入: 10
// 输出: false
// 解释: 从右向左读, 为 01 。因此它不是一个回文数


